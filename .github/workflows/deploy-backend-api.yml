name: Deploy Task List Backend API to Google GKE

on:
  workflow_dispatch:  # Manual trigger
#  push:
#    branches:
#      - main  # Trigger on push to main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      GAR_LOCATION: ${{ vars.GAR_LOCATION }}
      REPOSITORY: ${{ vars.GAR_REPOSITORY }}
      IMAGE: tasklist
      CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
      CLUSTER_ZONE: ${{ vars.GKE_CLUSTER_ZONE }}
      DEPLOYMENT_NAME: tasklist-deployment
      CONTAINER_NAME: tasklist-container
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: mvn test

#      - name: SonarQube Analysis
#        uses: SonarSource/sonarqube-scan-action@v1.0.1
#        env:
#          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }} --project ${{ env.PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} ${{ env.CONTAINER_NAME }}=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest
